namespace RMGTools {

  template <class T>
  inline std::unique_ptr<T> MakeG4UIcmdWithANumberAndUnit(G4String name,
      G4UImessenger* msg, G4String unit_cat, G4String unit_cand, G4String par_name,
      G4String range, std::vector<G4ApplicationState> avail_for) {

    std::unique_ptr<T> cmd(new T(name.c_str(), msg));
    for (auto& s : avail_for) cmd->AvailableForStates(s);
    cmd->SetParameterName(par_name, false);
    cmd->SetUnitCategory(unit_cat);
    if (!unit_cand.empty()) cmd->SetUnitCandidates(unit_cand);
    if (!range.empty()) cmd->SetRange(range);

    return cmd;
  }

  template <class T>
  inline std::unique_ptr<T> MakeG4UIcmdWithANumber(G4String name,
      G4UImessenger* msg, G4String par_name, G4String range,
      std::vector<G4ApplicationState> avail_for) {

    std::unique_ptr<T> cmd(new T(name.c_str(), msg));
    for (auto& s : avail_for) cmd->AvailableForStates(s);
    cmd->SetParameterName(par_name, false);
    if (!range.empty()) cmd->SetRange(range);

    return cmd;
  }
}

// vim: shiftwidth=2 tabstop=2 expandtab
