// Copyright (C) 2022 Luigi Pertoldi <https://orcid.org/0000-0002-0467-2571>
//
// This program is free software: you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option) any
// later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
// details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// Modified by Luigi Pertoldi <https://orcid.org/0000-0002-0467-2571> in 2022
//
// Original copyright statement:
/*
 * Copyright (C) 2007-2018, the BAT core developer team
 * All rights reserved.
 *
 * For the licensing terms see doc/COPYING.
 * For documentation see http://mpp.mpg.de/bat
 */

#include <sstream>
#include <fstream>

#include "globals.hh"

template <typename T>
inline void RMGLog::Print(RMGLog::LogLevel loglevel, const T& msg, bool prefixed, bool do_flush) {
  if (loglevel >= RMGLog::error) {
    fHadError = true;
  } else if (loglevel == RMGLog::warning) {
    fHadWarning = true;
  }

  // write message to screen
  if (loglevel >= RMGLog::fMinimumLogLevel) {
    std::ostream& strm = loglevel > RMGLog::LogLevel::warning ? G4cout : G4cerr;
    if (prefixed) strm << RMGLog::GetPrefix(loglevel, strm);
    strm << msg;
    if (do_flush) strm << std::flush;
  }
}

// ---------------------------------------------------------

template <typename T>
inline void RMGLog::Out(RMGLog::LogLevel loglevel, const T& message) {
  // if this is the first call to Out(), call StartupInfo() first
  if (!RMGLog::fFirstOutputDone) RMGLog::StartupInfo();

  RMGLog::Print(loglevel, message, true);
  RMGLog::Print(loglevel, "\n", false);

  // abort if error is fatal
  if (loglevel == fatal) std::abort();
}

// ---------------------------------------------------------

template <typename T, typename... Args>
inline void RMGLog::Out(RMGLog::LogLevel loglevel, const T& t, const Args&... args) {

  // if this is the first call to Out(), call StartupInfo() first
  if (!RMGLog::fFirstOutputDone) RMGLog::StartupInfo();

  RMGLog::Print(loglevel, t, true, false);
  (RMGLog::Print(loglevel, args, false, false), ...);
  RMGLog::Print(loglevel, "\n", false);

  // abort if error is fatal
  if (loglevel == fatal) std::abort();
}

// ---------------------------------------------------------

template <typename... Args>
inline void RMGLog::OutFormat(RMGLog::LogLevel loglevel, const std::string& fmt, const Args&... args) {
    try {
        RMGLog::Out(loglevel, fmt::format(fmt, args...));
    }
    catch (fmt::format_error& e) {
        RMGLog::Out(RMGLog::error, "fmt library exception caught: ", e.what());
    }
}

// ---------------------------------------------------------

template <RMGLog::Ansi color, typename T>
inline std::string RMGLog::Colorize(const T& msg, std::ostream& os, bool bold) {

  // check terminal capabilities before
  if (!RMGLog::SupportsColors(os)) return msg;

  std::ostringstream ss;
  if (color == RMGLog::Ansi::unspecified) {
      if (bold) ss << "\033[1m" << msg << "\033[0m";
      else ss << msg;
  }
  else {
      ss << "\033[" << (bold ? "1;" : "") << color << "m" << msg << "\033[0m";
  }
  return ss.str();
}

// vim: tabstop=2 shiftwidth=2 expandtab ft=cpp
