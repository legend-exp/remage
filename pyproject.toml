[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "remage"
authors = [
  { name = "The remage developers" },
]
maintainers = [
  { name = "The LEGEND Collaboration" },
]
description = "A python wrapper for remage"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
  "legend-pydataobj<1.12",
  "colorlog",
  "tol_colors",
  "reboost>=0.2.4",
]

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
  "awkward",
  "hist[plot]",
  "legend-pygeom-optics",
  "legend-pygeom-hpges",
  "legend-pygeom-tools",
  "matplotlib",
  "mplhep",
  "numpy",
  "pandas",
  "pyg4ometry",
  "numba", # without this, uv somehow fails to pick a good numba version
]
docs = [
  "sphinx-copybutton",
  "sphinx-togglebutton",
  "sphinx-inline-tabs",
  "sphinx-subfigure",
  "sphinx",
  "exhale",
  "breathe",
  "myst-parser",
  "furo",
]

[project.scripts]
remage = "remage.cli:remage_cli"

[project.urls]
Homepage = "https://github.com/legend-exp/remage"
"Bug Tracker" = "https://github.com/legend-exp/remage/issues"
Discussions = "https://github.com/legend-exp/remage/discussions"
Changelog = "https://github.com/legend-exp/remage/releases"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "python/remage/_version.py"

[tool.hatch.version.raw-options]
dist_name = "remage"

[tool.hatch.build.targets.sdist]
ignore-vcs = true
include = ["python/**/*"]
exclude = ["python/CMakeLists.txt"]

[tool.hatch.build.targets.wheel]
packages = ["python/remage"]
ignore-vcs = true

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]

[tool.ruff]

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "PT011",    # `pytest.raises(ValueError)` is too broad
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.pylint]
py-version = "3.9"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
  "too-many-nested-blocks"
]
